#!/bin/xonsh

import argparse
from colorama import Fore, Style

def main():

    setup()

    dotfilesOs = $DOTFILES_OS_CHECK
    print(Fore.GREEN + "\n==>" + Style.RESET_ALL + Style.BRIGHT + f"Desktop Environment: {dotfilesOs}" + Style.RESET_ALL)

    path = $(pwd)

    match dotfilesOs:
        case "desktopArchlinux":
            cd @(path + "/" + dotfilesOs) && ./dotfiles.sh
        case "thinkpadArchlinux":
            cd @(path + "/" + dotfilesOs) && ./dotfiles.sh
        case "unknown":
            print("\nenvironmental variable not found. is it set?\n")
            exit(1)


def setup():
    parser = argparse.ArgumentParser(description="copy dotfiles from local computer to git repo")

    parser.add_argument("-c", "--crossPlatform", action="store_true", help="copy crossPlatform and platform specific dotfiles")
    parser.add_argument("-s", "--specific", action="store_true", help="copy only platform specific dotfiles")

    args = parser.parse_args()

    if args.crossPlatform and not args.specific:
            crossPlatform()
            print(Fore.GREEN + "\n==>" + Style.RESET_ALL + Style.BRIGHT + "copying crossPlatform and local dotfiles" + Style.RESET_ALL)
    elif args.specific and not args.crossPlatform:
            print("copying only local dotfiles")
    else:
        print(Fore.GREEN + "\n==>" + Style.RESET_ALL + Style.BRIGHT + "no flag passed. copy (c)rossPlatform and platform specific dotfiles, or just platform (s)pecific dotfiles" + Style.RESET_ALL)
        
        while True:
            choice = input("(default=crossPlatform): ").strip()

            if choice == 'c' or choice == '':
                print("")
                crossPlatform()
                break
            elif choice == 's':
                break
            else:
                print("invalid input. try again\n")


def crossPlatform():
    cp -r ~/.config/nvim ./crossPlatform/
    print("Neovim config copied.")

    cp -r ~/.config/fastfetch ./crossPlatform/
    print("fastfetch config copied.")

    cp -r "/home/andya/.config/zellij" "./crossPlatform/"
    print("zellij config copied.")

    cp ~/.config/spicetify/CustomApps/customAppsUpdate.sh ./crossPlatform/spicetify/CustomApps/
    print("customAppsUpdate.sh copied.")

    cp ~/.config/spicetify/config-xpui.ini ./crossPlatform/spicetify/
    print("config-xpui.ini copied.")

    cp ~/.config/kitty/kitty.conf ./crossPlatform/
    print("kitty.conf copied.")

    cp ~/.config/starship.toml ./crossPlatform/
    print("starship.toml copied.")

    cp ~/.tmux.conf ./crossPlatform/
    print("tmux.conf copied.")

    # cp -r ~/.config/yazi ./crossPlatform/
    # print("yazi config copied.")

    cp ~/gitRepos/gitReposUpdate.xonsh ./scripts/
    print("gitReposUpdate.py copied.")

    cp -r ~/.config/aerc ./crossPlatform/
    print("aerc config copied.")

    cp -r ~/.config/spotify-player ./crossPlatform/
    print("spotify-player config copied.")

    cp ~/.config/sclirc ./crossPlatform/
    print("sclirc copied.")

    cp -r ~/scripts/aliases ./scripts/
    print("aliases scripts copied.")

    cp ~/scripts/reflectorMirrorUpdate.sh ./scripts/
    print("reflectorMirrorUpdate.sh copied.")

    cp -r ~/.config/rofi/ ./crossPlatform/
    print("rofi/ copied.")

if __name__ == "__main__":
    main()
